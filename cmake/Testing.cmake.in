#=============================================
#
# Define a macro to simplify building and linking test executables
#
#=============================================
macro(build_executable arg)
  include_directories("${PROJECT_SOURCE_DIR}/test")
  add_executable( ${arg} "${arg}.cpp")
    target_link_libraries( ${arg}
      pfabric_core
      benchmark
      ${Boost_SYSTEM_LIBRARY}
      ${ROCKSDB_LIB}
      ${PMDK_LIBRARIES}
      ${MALLOC_LIB}
    )
endmacro(build_executable)

macro(build_catch_test arg)
  include_directories("${PROJECT_SOURCE_DIR}/test")
  add_executable( ${arg} "${arg}.cpp" $<TARGET_OBJECTS:TestMain>)
    target_link_libraries( ${arg}
      pfabric_core
      ${Boost_SYSTEM_LIBRARY}
      ${ROCKSDB_LIB}
      ${PMDK_LIBRARIES}
      ${MALLOC_LIB}
    )
endmacro(build_catch_test)

#=============================================
#
# Define a macro to simplify adding tests
#
#=============================================
macro (do_test arg)
    add_test(
        NAME ${arg}
        COMMAND "${CMAKE_CURRENT_BINARY_DIR}/${arg}"
    )
    build_catch_test( ${arg} )
endmacro(do_test)

macro (do_bench arg)
    add_test(
        NAME ${arg}
        COMMAND "${CMAKE_CURRENT_BINARY_DIR}/${arg}"
        --benchmark_min_time=0.01
    )
    build_executable( ${arg} )
endmacro(do_bench)

set (CTEST_ENVIRONMENT
  "DYLD_FALLBACK_LIBRARY_PATH=${DYLD_LIBRARY_PATH}"
)
