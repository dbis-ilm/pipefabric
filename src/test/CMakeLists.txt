include(../../cmake/Testing.cmake.in)

#=============================================
# define the test data directory for the input and output
add_definitions( -DTEST_DATA_DIRECTORY="${CMAKE_CURRENT_SOURCE_DIR}/test_data/")

if (BUILD_TEST_CASES)
  add_library(TestMain OBJECT TestMain.cpp)
  add_dependencies(TestMain pfabric_core)
  do_test(FlowTest)
  do_test(TupleTest)
  do_test(TimestampHelperTest)
  do_test(StreamElementTraitsTest)
  do_test(SourceTest)
  do_test(SinkTest)
  do_test(SignalTest)
  do_test(SelectChannelParametersTest)
  do_test(ChannelGroupTest)
  do_test(TextFileSourceTest)
  do_test(MemorySourceTest)
  do_test(RESTSourceTest)
  do_test(MapTest)
  do_test(WhereTest)
  do_test(NotifyTest)
  do_test(QueueTest)
  do_test(TupleExtractorTest)
  do_test(WriterTest)
  do_test(WindowTest)
  do_test(SHJoinTest)
  do_test(TopologyTest)
  do_test(TopologyJoinTest)
  do_test(TopologyAggregationTest)
  do_test(TopologyGroupByTest)
  do_test(AggregateFuncTest)
  do_test(AggregationTest)
  do_test(GroupedAggregationTest)
  do_test(ZMQSourceTest)
  do_test(SeqCEPTest)
  do_test(ToTableTest)
  do_test(FromTableTest)
  do_test(ContextTest)
  do_test(CEPDSLTest)
  do_test(ZMQPubSubTest)
  do_test(PartitionTest)
  do_test(BarrierTest)
  do_test(StreamGeneratorTest)
  do_test(TuplifierTest)

  if (USE_ROCKSDB_TABLE)
    do_test(RocksDBTest)
    do_test(RDBTableTest)
  elseif (USE_NVM_TABLE)
    do_test(NVMTableTest)
  else ()
    do_test(HashMapTableTest)
  endif ()

  if(SUPPORT_MATRICES)
    do_test(FromMatrixTest)
    do_test(MatrixSliceTest)
    do_test(MatrixTest)
  endif()

  if(USE_RABBITMQ)
    do_test(RabbitMQSourceTest)
  endif()

  if(USE_KAFKA)
    do_test(KafkaSourceTest)
  endif()

  if(USE_MQTT)
    do_test(MQTTSourceTest)
  endif()

  if(BUILD_PYTHON)
    add_test(
      NAME Python_Test
      COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/PyTest.py
    )
  endif()

  if(BUILD_BENCHMARKS)
    do_bench(TopologyBenchmarks)
  endif()

  if(BUILD_USE_CASES)
    do_test(LinearRoadTest)
  endif()
elseif(BUILD_USE_CASES)
  add_library(TestMain OBJECT TestMain.cpp)
  add_dependencies(TestMain pfabric_core)
  do_test(LinearRoadTest)
endif()
